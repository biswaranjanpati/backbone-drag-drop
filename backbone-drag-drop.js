// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function() {
    Backbone.DraggableModel = (function(_super) {

      __extends(DraggableModel, _super);

      function DraggableModel() {
        return DraggableModel.__super__.constructor.apply(this, arguments);
      }

      return DraggableModel;

    })(Backbone.Model);
    Backbone.DroppableCollection = (function(_super) {

      __extends(DroppableCollection, _super);

      function DroppableCollection() {
        return DroppableCollection.__super__.constructor.apply(this, arguments);
      }

      return DroppableCollection;

    })(Backbone.Collection);
    Backbone.DraggableView = (function(_super) {

      __extends(DraggableView, _super);

      function DraggableView() {
        this.didDrop = __bind(this.didDrop, this);

        this.canDrop = __bind(this.canDrop, this);

        this._didDrop = __bind(this._didDrop, this);

        this._canDrop = __bind(this._canDrop, this);

        this.draggable = __bind(this.draggable, this);
        return DraggableView.__super__.constructor.apply(this, arguments);
      }

      DraggableView.prototype.draggable = function(options) {
        if (options == null) {
          options = {};
        }
        options.canDrop = this._canDrop;
        options.didDrop = this._didDrop;
        this.$el.dragdrop(options);
        this.$el.data('view', this);
        return this.$el.data('model', this.model);
      };

      DraggableView.prototype._canDrop = function(el) {
        var droppable_view;
        droppable_view = $(el).data('view');
        if (!droppable_view) {
          return false;
        }
        return droppable_view.canDrop(this) && this.canDrop(droppable_view);
      };

      DraggableView.prototype._didDrop = function(src, dst) {
        var dst_collection, dst_view, src_collection, src_model, src_view;
        src_view = src.data('view');
        dst_view = dst.data('view');
        src_model = src.data('model');
        src_collection = src_view.$el.parent().data('collection');
        dst_collection = dst.data('collection');
        if (src_collection != null) {
          src_collection.remove(src_model);
        }
        if (dst_collection != null) {
          dst_collection.add(src_model);
        }
        return this.didDrop(src_view, dst_view);
      };

      DraggableView.prototype.canDrop = function(droppable_view) {
        return true;
      };

      DraggableView.prototype.didDrop = function(draggable_view, droppable_view) {
        return draggable_view.$el.appendTo(droppable_view.$el);
      };

      return DraggableView;

    })(Backbone.View);
    return Backbone.DroppableView = (function(_super) {

      __extends(DroppableView, _super);

      function DroppableView() {
        this.canDrop = __bind(this.canDrop, this);

        this.droppable = __bind(this.droppable, this);
        return DroppableView.__super__.constructor.apply(this, arguments);
      }

      DroppableView.prototype.droppable = function(options) {
        if (options == null) {
          options = {};
        }
        this.$el.data('view', this);
        return this.$el.data('collection', this.collection);
      };

      DroppableView.prototype.canDrop = function(draggable_view) {
        return true;
      };

      return DroppableView;

    })(Backbone.View);
  }).call(this);

}).call(this);
